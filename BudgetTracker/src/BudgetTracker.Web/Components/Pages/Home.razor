@page "/"
@rendermode InteractiveServer
@using BudgetTracker.Data
@using BudgetTracker.Domain.Entities
@inject InMemoryRepository<Category> CategoryRepo
@inject InMemoryRepository<Transaction> TransactionRepo
@inject InMemoryRepository<Budget> BudgetRepo

<PageTitle>Budget Tracker</PageTitle>

<style>
    * {
        margin: 0;
        padding: 0;
        box-sizing: border-box;
    }

    body {
        background: #f5f5f5;
    }

    .app-container {
        min-height: 100vh;
        display: flex;
        flex-direction: column;
        background: #f5f5f5;
    }

    .tabs-header {
        display: flex;
        gap: 0;
        border-bottom: 3px solid #007bff;
        background: white;
        padding: 0;
        box-shadow: 0 2px 4px rgba(0,0,0,0.1);
    }

    .tab-btn {
        padding: 16px 24px;
        border: none;
        background: white;
        cursor: pointer;
        font-size: 16px;
        font-weight: 500;
        color: #666;
        border-bottom: 4px solid transparent;
        transition: all 0.3s ease;
        white-space: nowrap;
    }

    .tab-btn:hover {
        color: #333;
        background: #f9f9f9;
    }

    .tab-btn.active {
        color: #007bff;
        border-bottom-color: #007bff;
        background: white;
    }

    .content-area {
        flex: 1;
        padding: 24px;
        background: #f5f5f5;
        overflow-y: auto;
    }

    .tab-content {
        display: none;
    }

    .tab-content.active {
        display: block;
    }

    .card {
        background: white;
        border-radius: 8px;
        padding: 20px;
        margin-bottom: 20px;
        box-shadow: 0 2px 4px rgba(0,0,0,0.1);
    }

    h2 {
        font-size: 28px;
        margin-bottom: 24px;
        color: #333;
    }

    h3 {
        font-size: 20px;
        margin-top: 24px;
        margin-bottom: 16px;
        color: #333;
    }

    .stats-grid {
        display: grid;
        grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
        gap: 16px;
        margin-bottom: 24px;
    }

    .stat-card {
        background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
        color: white;
        padding: 24px;
        border-radius: 8px;
        box-shadow: 0 2px 8px rgba(0,0,0,0.1);
    }

    .stat-card h4 {
        font-size: 14px;
        opacity: 0.9;
        margin: 0 0 12px 0;
    }

    .stat-value {
        font-size: 32px;
        font-weight: bold;
    }

    .stat-card.income {
        background: linear-gradient(135deg, #11998e 0%, #38ef7d 100%);
    }

    .stat-card.expense {
        background: linear-gradient(135deg, #eb3b5a 0%, #fc5c65 100%);
    }

    table {
        width: 100%;
        border-collapse: collapse;
        font-size: 14px;
    }

    th {
        background: #f8f9fa;
        padding: 12px;
        text-align: left;
        font-weight: 600;
        border-bottom: 2px solid #dee2e6;
    }

    td {
        padding: 12px;
        border-bottom: 1px solid #dee2e6;
    }

    tr:hover {
        background: #f8f9fa;
    }

    .btn-group {
        display: flex;
        gap: 10px;
        margin-top: 20px;
        flex-wrap: wrap;
    }

    .btn {
        padding: 10px 20px;
        border: none;
        border-radius: 5px;
        cursor: pointer;
        font-size: 14px;
        font-weight: 500;
        transition: all 0.3s ease;
    }

    .btn-primary {
        background: #007bff;
        color: white;
    }

    .btn-primary:hover {
        background: #0056b3;
    }

    .btn-success {
        background: #28a745;
        color: white;
    }

    .btn-success:hover {
        background: #218838;
    }

    .btn-danger {
        background: #dc3545;
        color: white;
    }

    .btn-danger:hover {
        background: #c82333;
    }

    .btn-secondary {
        background: #6c757d;
        color: white;
    }

    .btn-secondary:hover {
        background: #5a6268;
    }

    .form-group {
        margin-bottom: 16px;
    }

    .form-group label {
        display: block;
        margin-bottom: 6px;
        font-weight: 500;
        font-size: 14px;
    }

    .form-group input,
    .form-group select {
        width: 100%;
        padding: 10px;
        border: 1px solid #ddd;
        border-radius: 4px;
        font-size: 14px;
    }

    .budget-item {
        background: #f8f9fa;
        padding: 16px;
        border-radius: 8px;
        margin-bottom: 16px;
    }

    .budget-header {
        display: flex;
        justify-content: space-between;
        align-items: center;
        margin-bottom: 12px;
    }

    .budget-header h4 {
        margin: 0;
        font-size: 16px;
    }

    .progress-bar {
        height: 8px;
        background: #e9ecef;
        border-radius: 4px;
        overflow: hidden;
    }

    .progress-fill {
        height: 100%;
        background: linear-gradient(90deg, #28a745, #20c997);
        transition: width 0.3s ease;
    }

    .progress-fill.warning {
        background: linear-gradient(90deg, #ffc107, #ff9800);
    }

    .progress-fill.danger {
        background: linear-gradient(90deg, #dc3545, #e74c3c);
    }

    .empty-state {
        text-align: center;
        padding: 40px 20px;
        color: #999;
    }

    .empty-state p {
        font-size: 16px;
    }
</style>

<div class="app-container">
    <!-- Tabs Header -->
    <div class="tabs-header">
        <button class="tab-btn @(activeTab == "dashboard" ? "active" : "")"
                @onclick="@((MouseEventArgs e) => SwitchTab("dashboard"))">
            üìä Dashboard
        </button>
        <button class="tab-btn @(activeTab == "transactions" ? "active" : "")"
                @onclick="@((MouseEventArgs e) => SwitchTab("transactions"))">
            üí≥ Transactions
        </button>
        <button class="tab-btn @(activeTab == "budgets" ? "active" : "")"
                @onclick="@((MouseEventArgs e) => SwitchTab("budgets"))">
            üí∞ Budgets
        </button>
        <button class="tab-btn @(activeTab == "settings" ? "active" : "")"
                @onclick="@((MouseEventArgs e) => SwitchTab("settings"))">
            ‚öôÔ∏è Settings
        </button>
    </div>

    <!-- Content Area -->
    <div class="content-area">
        <!-- Dashboard Tab -->
        <div class="tab-content @(activeTab == "dashboard" ? "active" : "")">
            <h2>Dashboard</h2>

            <div class="stats-grid">
                <div class="stat-card">
                    <h4>Total Balance</h4>
                    <div class="stat-value">$@(totalBalance.ToString("F2"))</div>
                </div>
                <div class="stat-card income">
                    <h4>Total Income</h4>
                    <div class="stat-value">$@(totalIncome.ToString("F2"))</div>
                </div>
                <div class="stat-card expense">
                    <h4>Total Expense</h4>
                    <div class="stat-value">$@(totalExpense.ToString("F2"))</div>
                </div>
            </div>

            <div class="card">
                <h3>Recent Transactions</h3>
                @if (recentTransactions.Count > 0)
                {
                    <table>
                        <thead>
                            <tr>
                                <th>Date</th>
                                <th>Description</th>
                                <th>Category</th>
                                <th>Amount</th>
                                <th>Type</th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var txn in recentTransactions)
                            {
                                <tr>
                                    <td>@txn.Date.ToString("yyyy-MM-dd")</td>
                                    <td>@txn.Description</td>
                                    <td>@(txn.Category?.Name ?? "N/A")</td>
                                    <td style="color: @(txn is Income ? "green" : "red"); font-weight: bold;">
                                        @(txn is Income ? "+" : "-")$@(txn.Amount.Amount.ToString("F2"))
                                    </td>
                                    <td>@(txn is Income ? "Income" : "Expense")</td>
                                </tr>
                            }
                        </tbody>
                    </table>
                }
                else
                {
                    <div class="empty-state">
                        <p>No transactions yet</p>
                    </div>
                }
            </div>

            <div class="card">
                <h3>Budget Status</h3>
                @if (budgets.Count > 0)
                {
                    @foreach (var budget in budgets.Take(5))
                    {
                        var spent = TransactionRepo.GetAll()
                            .Where(t => t.CategoryId == budget.CategoryId && t.Date >= budget.StartDate && t.Date <= budget.EndDate)
                            .OfType<Expense>()
                            .Sum(t => t.Amount.Amount);
                        var percentage = budget.Amount.Amount > 0 ? (spent / budget.Amount.Amount) * 100 : 0;
                        var progressClass = percentage > 100 ? "danger" : percentage > 80 ? "warning" : "";

                        <div class="budget-item">
                            <div class="budget-header">
                                <h4>@(budget.Category?.Name ?? "Budget")</h4>
                                <span>$@spent.ToString("F2") / $@budget.Amount.Amount.ToString("F2")</span>
                            </div>
                            <div class="progress-bar">
                                <div class="progress-fill @progressClass"
                                     style="width: @(Math.Min(percentage, 100))%"></div>
                            </div>
                        </div>
                    }
                }
                else
                {
                    <div class="empty-state">
                        <p>No budgets set up yet</p>
                    </div>
                }

                <div class="btn-group">
                    <button class="btn btn-primary" @onclick="OnAddBudget">+ Add Budget</button>
                    <button class="btn btn-secondary" @onclick="OnEditBudget">Edit Budget</button>
                    <button class="btn btn-danger" @onclick="OnDeleteBudget">Delete Budget</button>
                </div>
            </div>
        </div>

        <!-- Transactions Tab -->
        <div class="tab-content @(activeTab == "transactions" ? "active" : "")">
            <h2>Transactions</h2>

            <div class="card">
                <div class="form-group">
                    <label>Search Description</label>
                    <input type="text" @bind="searchText" placeholder="Enter description to search..." />
                </div>
            </div>

            <div class="card">
                <h3>All Transactions (@filteredTransactions.Count)</h3>
                @if (filteredTransactions.Count > 0)
                {
                    <table>
                        <thead>
                            <tr>
                                <th>Date</th>
                                <th>Description</th>
                                <th>Category</th>
                                <th>Amount</th>
                                <th>Type</th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var txn in filteredTransactions)
                            {
                                <tr>
                                    <td>@txn.Date.ToString("yyyy-MM-dd")</td>
                                    <td>@txn.Description</td>
                                    <td>@(txn.Category?.Name ?? "N/A")</td>
                                    <td style="color: @(txn is Income ? "green" : "red"); font-weight: bold;">
                                        @(txn is Income ? "+" : "-")$@(txn.Amount.Amount.ToString("F2"))
                                    </td>
                                    <td>@(txn is Income ? "Income" : "Expense")</td>
                                </tr>
                            }
                        </tbody>
                    </table>
                }
                else
                {
                    <div class="empty-state">
                        <p>@(string.IsNullOrWhiteSpace(searchText) ? "No transactions available" : "No transactions match your search")</p>
                    </div>
                }

                <div class="btn-group">
                    <button class="btn btn-primary" @onclick="OnAddTransaction">+ Add Transaction</button>
                    <button class="btn btn-secondary" @onclick="OnEditTransaction">Edit Transaction</button>
                    <button class="btn btn-danger" @onclick="OnDeleteTransaction">Delete Transaction</button>
                    <button class="btn btn-secondary" @onclick="OnImportCSV">Import CSV</button>
                </div>
            </div>
        </div>

        <!-- Budgets Tab -->
        <div class="tab-content @(activeTab == "budgets" ? "active" : "")">
            <h2>Budgets</h2>

            <div class="card">
                <h3>All Budgets (@budgets.Count)</h3>
                @if (budgets.Count > 0)
                {
                    @foreach (var budget in budgets)
                    {
                        var spent = TransactionRepo.GetAll()
                            .Where(t => t.CategoryId == budget.CategoryId && t.Date >= budget.StartDate && t.Date <= budget.EndDate)
                            .OfType<Expense>()
                            .Sum(t => t.Amount.Amount);
                        var percentage = budget.Amount.Amount > 0 ? (spent / budget.Amount.Amount) * 100 : 0;
                        var progressClass = percentage > 100 ? "danger" : percentage > 80 ? "warning" : "";

                        <div class="budget-item">
                            <div class="budget-header">
                                <div>
                                    <h4>@(budget.Category?.Name ?? "Budget")</h4>
                                    <small style="color: #666;">@budget.StartDate.ToString("MMM dd") - @budget.EndDate.ToString("MMM dd")</small>
                                </div>
                                <div style="text-align: right;">
                                    <strong>$@spent.ToString("F2") / $@budget.Amount.Amount.ToString("F2")</strong>
                                    <br />
                                    <small style="color: #666;">@percentage.ToString("F1")% Used</small>
                                </div>
                            </div>
                            <div class="progress-bar">
                                <div class="progress-fill @progressClass"
                                     style="width: @(Math.Min(percentage, 100))%"></div>
                            </div>
                        </div>
                    }
                }
                else
                {
                    <div class="empty-state">
                        <p>No budgets set up yet. Create one to track your spending!</p>
                    </div>
                }

                <div class="btn-group">
                    <button class="btn btn-primary" @onclick="OnAddBudget">+ Add Budget</button>
                    <button class="btn btn-secondary" @onclick="OnEditBudget">Edit Budget</button>
                    <button class="btn btn-danger" @onclick="OnDeleteBudget">Delete Budget</button>
                </div>
            </div>
        </div>

        <!-- Settings Tab -->
        <div class="tab-content @(activeTab == "settings" ? "active" : "")">
            <h2>Settings</h2>

            <div class="card">
                <h3>Categories (@categories.Count)</h3>
                @if (categories.Count > 0)
                {
                    <table>
                        <thead>
                            <tr>
                                <th>Category Name</th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var cat in categories)
                            {
                                <tr>
                                    <td>@cat.Name</td>
                                </tr>
                            }
                        </tbody>
                    </table>
                }
                else
                {
                    <div class="empty-state">
                        <p>No categories available</p>
                    </div>
                }

                <div class="btn-group">
                    <button class="btn btn-primary" @onclick="OnAddCategory">+ Add Category</button>
                    <button class="btn btn-secondary" @onclick="OnEditCategory">Edit Category</button>
                    <button class="btn btn-danger" @onclick="OnDeleteCategory">Delete Category</button>
                </div>
            </div>

            <div class="card">
                <h3>Accounts</h3>
                <p style="color: #666; font-size: 14px;">Account management features coming soon...</p>
                <div class="btn-group">
                    <button class="btn btn-primary" @onclick="OnAddAccount">+ Add Account</button>
                    <button class="btn btn-secondary" @onclick="OnEditAccount">Edit Account</button>
                    <button class="btn btn-danger" @onclick="OnDeleteAccount">Delete Account</button>
                </div>
            </div>
        </div>
    </div>
</div>

@code {
    private string activeTab = "dashboard";
    private string searchText = "";
    private decimal totalBalance;
    private decimal totalIncome;
    private decimal totalExpense;
    private List<Transaction> recentTransactions = new();
    private List<Budget> budgets = new();
    private List<Category> categories = new();
    private List<Transaction> allTransactions = new();

    protected override void OnInitialized()
    {
        LoadData();
    }

    private void LoadData()
    {
        allTransactions = TransactionRepo.GetAll().ToList();
        budgets = BudgetRepo.GetAll().ToList();
        categories = CategoryRepo.GetAll().ToList();

        var incomes = allTransactions.OfType<Income>();
        var expenses = allTransactions.OfType<Expense>();

        totalIncome = incomes.Sum(t => t.Amount.Amount);
        totalExpense = expenses.Sum(t => t.Amount.Amount);
        totalBalance = totalIncome - totalExpense;

        recentTransactions = allTransactions
            .OrderByDescending(t => t.Date)
            .Take(10)
            .ToList();
    }

    private List<Transaction> filteredTransactions
    {
        get
        {
            if (string.IsNullOrWhiteSpace(searchText))
                return allTransactions.OrderByDescending(t => t.Date).ToList();

            return allTransactions
                .Where(t => t.Description.Contains(searchText, StringComparison.OrdinalIgnoreCase))
                .OrderByDescending(t => t.Date)
                .ToList();
        }
    }

    private void SwitchTab(string tabName)
    {
        activeTab = tabName;
        StateHasChanged();
    }

    // Budget handlers
    private void OnAddBudget()
    {
        // Placeholder - will implement dialog later
        Console.WriteLine("Add Budget clicked");
    }

    private void OnEditBudget()
    {
        Console.WriteLine("Edit Budget clicked");
    }

    private void OnDeleteBudget()
    {
        Console.WriteLine("Delete Budget clicked");
    }

    // Transaction handlers
    private void OnAddTransaction()
    {
        Console.WriteLine("Add Transaction clicked");
    }

    private void OnEditTransaction()
    {
        Console.WriteLine("Edit Transaction clicked");
    }

    private void OnDeleteTransaction()
    {
        Console.WriteLine("Delete Transaction clicked");
    }

    private void OnImportCSV()
    {
        Console.WriteLine("Import CSV clicked");
    }

    // Category handlers
    private void OnAddCategory()
    {
        Console.WriteLine("Add Category clicked");
    }

    private void OnEditCategory()
    {
        Console.WriteLine("Edit Category clicked");
    }

    private void OnDeleteCategory()
    {
        Console.WriteLine("Delete Category clicked");
    }

    // Account handlers
    private void OnAddAccount()
    {
        Console.WriteLine("Add Account clicked");
    }

    private void OnEditAccount()
    {
        Console.WriteLine("Edit Account clicked");
    }

    private void OnDeleteAccount()
    {
        Console.WriteLine("Delete Account clicked");
    }
}
