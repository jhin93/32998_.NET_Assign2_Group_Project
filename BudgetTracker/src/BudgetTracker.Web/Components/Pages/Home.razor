@page "/"
@using BudgetTracker.Data
@using BudgetTracker.Domain.Entities
@inject InMemoryRepository<Category> CategoryRepo
@inject InMemoryRepository<Transaction> TransactionRepo
@inject InMemoryRepository<Budget> BudgetRepo

<PageTitle>Budget Tracker</PageTitle>

<style>
    body {
        margin: 0;
        padding: 0;
        background: #f5f5f5;
    }

    .tab-container {
        max-width: 1200px;
        margin: 0 auto;
        padding: 20px;
    }

    .tabs {
        display: flex;
        gap: 0;
        border-bottom: 2px solid #ddd;
        margin-bottom: 30px;
        background: white;
        border-radius: 8px 8px 0 0;
    }

    .tab-button {
        padding: 15px 25px;
        border: none;
        background: none;
        cursor: pointer;
        font-size: 16px;
        font-weight: 500;
        color: #666;
        border-bottom: 3px solid transparent;
        transition: all 0.3s ease;
    }

    .tab-button:hover {
        color: #333;
        background: #f9f9f9;
    }

    .tab-button.active {
        color: #007bff;
        border-bottom-color: #007bff;
        background: white;
    }

    .tab-content {
        background: white;
        border-radius: 0 0 8px 8px;
        padding: 30px;
        min-height: 500px;
        box-shadow: 0 2px 4px rgba(0,0,0,0.1);
    }

    .content-section {
        display: none;
    }

    .content-section.active {
        display: block;
    }

    /* Dashboard Styles */
    .dashboard-grid {
        display: grid;
        grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
        gap: 20px;
        margin-bottom: 30px;
    }

    .stat-card {
        background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
        color: white;
        padding: 20px;
        border-radius: 8px;
        box-shadow: 0 2px 8px rgba(0,0,0,0.1);
    }

    .stat-card h3 {
        margin: 0;
        font-size: 14px;
        opacity: 0.9;
    }

    .stat-card .value {
        font-size: 28px;
        font-weight: bold;
        margin: 10px 0 0 0;
    }

    .stat-card.income {
        background: linear-gradient(135deg, #11998e 0%, #38ef7d 100%);
    }

    .stat-card.expense {
        background: linear-gradient(135deg, #eb3b5a 0%, #fc5c65 100%);
    }

    /* Table Styles */
    .table-container {
        overflow-x: auto;
        margin: 20px 0;
    }

    table {
        width: 100%;
        border-collapse: collapse;
        font-size: 14px;
    }

    th {
        background: #f8f9fa;
        padding: 12px;
        text-align: left;
        font-weight: 600;
        border-bottom: 2px solid #dee2e6;
    }

    td {
        padding: 12px;
        border-bottom: 1px solid #dee2e6;
    }

    tr:hover {
        background: #f8f9fa;
    }

    /* Button Styles */
    .action-buttons {
        display: flex;
        gap: 10px;
        margin-top: 20px;
    }

    .btn-custom {
        padding: 10px 20px;
        border: none;
        border-radius: 5px;
        cursor: pointer;
        font-size: 14px;
        font-weight: 500;
        transition: all 0.3s ease;
    }

    .btn-primary-custom {
        background: #007bff;
        color: white;
    }

    .btn-primary-custom:hover {
        background: #0056b3;
    }

    .btn-success-custom {
        background: #28a745;
        color: white;
    }

    .btn-success-custom:hover {
        background: #218838;
    }

    .btn-danger-custom {
        background: #dc3545;
        color: white;
    }

    .btn-danger-custom:hover {
        background: #c82333;
    }

    .btn-secondary-custom {
        background: #6c757d;
        color: white;
    }

    .btn-secondary-custom:hover {
        background: #5a6268;
    }

    .form-group {
        margin-bottom: 15px;
    }

    .form-group label {
        display: block;
        margin-bottom: 5px;
        font-weight: 500;
    }

    .form-group input,
    .form-group select {
        width: 100%;
        padding: 8px 12px;
        border: 1px solid #ddd;
        border-radius: 4px;
        font-size: 14px;
    }

    .budget-progress {
        margin: 15px 0;
    }

    .progress-bar {
        height: 8px;
        background: #e9ecef;
        border-radius: 4px;
        overflow: hidden;
        margin-top: 8px;
    }

    .progress-fill {
        height: 100%;
        background: linear-gradient(90deg, #28a745, #20c997);
        transition: width 0.3s ease;
    }

    .progress-fill.warning {
        background: linear-gradient(90deg, #ffc107, #ff9800);
    }

    .progress-fill.danger {
        background: linear-gradient(90deg, #dc3545, #e74c3c);
    }

    .empty-state {
        text-align: center;
        padding: 40px 20px;
        color: #999;
    }

    .empty-state p {
        font-size: 16px;
        margin: 10px 0;
    }
</style>

<div class="tab-container">
    <div class="tabs">
        <button class="tab-button @(activeTab == "dashboard" ? "active" : "")"
                @onclick="@((e) => SwitchTab("dashboard"))">
            📊 Dashboard
        </button>
        <button class="tab-button @(activeTab == "transactions" ? "active" : "")"
                @onclick="@((e) => SwitchTab("transactions"))">
            💳 Transactions
        </button>
        <button class="tab-button @(activeTab == "budgets" ? "active" : "")"
                @onclick="@((e) => SwitchTab("budgets"))">
            💰 Budgets
        </button>
        <button class="tab-button @(activeTab == "settings" ? "active" : "")"
                @onclick="@((e) => SwitchTab("settings"))">
            ⚙️ Settings
        </button>
    </div>

    <div class="tab-content">
        <!-- Dashboard Tab -->
        <div class="content-section @(activeTab == "dashboard" ? "active" : "")">
            <h2>Dashboard</h2>
            <div class="dashboard-grid">
                <div class="stat-card">
                    <h3>Total Balance</h3>
                    <div class="value">$@(totalBalance.ToString("F2"))</div>
                </div>
                <div class="stat-card income">
                    <h3>Total Income</h3>
                    <div class="value">$@(totalIncome.ToString("F2"))</div>
                </div>
                <div class="stat-card expense">
                    <h3>Total Expense</h3>
                    <div class="value">$@(totalExpense.ToString("F2"))</div>
                </div>
            </div>

            <h3 style="margin-top: 30px;">Recent Transactions</h3>
            @if (recentTransactions.Count > 0)
            {
                <div class="table-container">
                    <table>
                        <thead>
                            <tr>
                                <th>Date</th>
                                <th>Description</th>
                                <th>Category</th>
                                <th>Amount</th>
                                <th>Type</th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var txn in recentTransactions)
                            {
                                <tr>
                                    <td>@txn.Date.ToString("yyyy-MM-dd")</td>
                                    <td>@txn.Description</td>
                                    <td>@(txn.Category?.Name ?? "N/A")</td>
                                    <td style="color: @(txn is Income ? "green" : "red")">
                                        @(txn is Income ? "+" : "-")@(txn.Amount.Amount.ToString("F2"))
                                    </td>
                                    <td>@(txn is Income ? "Income" : "Expense")</td>
                                </tr>
                            }
                        </tbody>
                    </table>
                </div>
            }
            else
            {
                <div class="empty-state">
                    <p>No transactions yet</p>
                </div>
            }

            <h3 style="margin-top: 30px;">Budget Status</h3>
            @if (budgets.Count > 0)
            {
                @foreach (var budget in budgets.Take(5))
                {
                    var spent = TransactionRepo.GetAll()
                        .Where(t => t.CategoryId == budget.CategoryId && t.Date >= budget.StartDate && t.Date <= budget.EndDate)
                        .OfType<Expense>()
                        .Sum(t => t.Amount.Amount);
                    var percentage = (spent / budget.Amount.Amount) * 100;
                    var progressClass = percentage > 100 ? "danger" : percentage > 80 ? "warning" : "";

                    <div class="budget-progress">
                        <div style="display: flex; justify-content: space-between; margin-bottom: 5px;">
                            <strong>@(budget.Category?.Name ?? "Budget")</strong>
                            <span>$@spent.ToString("F2") / $@budget.Amount.Amount.ToString("F2")</span>
                        </div>
                        <div class="progress-bar">
                            <div class="progress-fill @progressClass"
                                 style="width: @(Math.Min(percentage, 100))%"></div>
                        </div>
                    </div>
                }
            }
            else
            {
                <div class="empty-state">
                    <p>No budgets set up yet</p>
                </div>
            }
        </div>

        <!-- Transactions Tab -->
        <div class="content-section @(activeTab == "transactions" ? "active" : "")">
            <h2>Transactions</h2>
            <div class="form-group">
                <label>Search Description</label>
                <input type="text" @bind="searchText" placeholder="Search transactions..." />
            </div>

            @if (allTransactions.Count > 0)
            {
                <div class="table-container">
                    <table>
                        <thead>
                            <tr>
                                <th>Date</th>
                                <th>Description</th>
                                <th>Category</th>
                                <th>Amount</th>
                                <th>Type</th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var txn in filteredTransactions)
                            {
                                <tr>
                                    <td>@txn.Date.ToString("yyyy-MM-dd")</td>
                                    <td>@txn.Description</td>
                                    <td>@(txn.Category?.Name ?? "N/A")</td>
                                    <td style="color: @(txn is Income ? "green" : "red")">
                                        @(txn is Income ? "+" : "-")@(txn.Amount.Amount.ToString("F2"))
                                    </td>
                                    <td>@(txn is Income ? "Income" : "Expense")</td>
                                </tr>
                            }
                        </tbody>
                    </table>
                </div>
            }
            else
            {
                <div class="empty-state">
                    <p>No transactions available</p>
                </div>
            }
        </div>

        <!-- Budgets Tab -->
        <div class="content-section @(activeTab == "budgets" ? "active" : "")">
            <h2>Budgets</h2>
            @if (budgets.Count > 0)
            {
                @foreach (var budget in budgets)
                {
                    var spent = TransactionRepo.GetAll()
                        .Where(t => t.CategoryId == budget.CategoryId && t.Date >= budget.StartDate && t.Date <= budget.EndDate)
                        .OfType<Expense>()
                        .Sum(t => t.Amount.Amount);
                    var percentage = (spent / budget.Amount.Amount) * 100;
                    var progressClass = percentage > 100 ? "danger" : percentage > 80 ? "warning" : "";

                    <div style="background: #f8f9fa; padding: 15px; border-radius: 8px; margin-bottom: 15px;">
                        <div style="display: flex; justify-content: space-between; align-items: center;">
                            <div>
                                <h4 style="margin: 0;">@(budget.Category?.Name ?? "Budget")</h4>
                                <p style="margin: 5px 0; color: #666;">
                                    @budget.StartDate.ToString("MMM dd") - @budget.EndDate.ToString("MMM dd")
                                </p>
                            </div>
                            <div style="text-align: right;">
                                <strong>$@spent.ToString("F2") / $@budget.Amount.Amount.ToString("F2")</strong>
                                <p style="margin: 5px 0; color: #666; font-size: 12px;">@percentage.ToString("F1")% Used</p>
                            </div>
                        </div>
                        <div class="progress-bar" style="margin-top: 10px;">
                            <div class="progress-fill @progressClass"
                                 style="width: @(Math.Min(percentage, 100))%"></div>
                        </div>
                    </div>
                }
            }
            else
            {
                <div class="empty-state">
                    <p>No budgets set up yet. Create one to track your spending!</p>
                </div>
            }
        </div>

        <!-- Settings Tab -->
        <div class="content-section @(activeTab == "settings" ? "active" : "")">
            <h2>Settings</h2>
            <div style="max-width: 600px;">
                <h3>Categories</h3>
                @if (categories.Count > 0)
                {
                    <div class="table-container">
                        <table>
                            <thead>
                                <tr>
                                    <th>Category Name</th>
                                </tr>
                            </thead>
                            <tbody>
                                @foreach (var cat in categories)
                                {
                                    <tr>
                                        <td>@cat.Name</td>
                                    </tr>
                                }
                            </tbody>
                        </table>
                    </div>
                }
                else
                {
                    <div class="empty-state">
                        <p>No categories available</p>
                    </div>
                }
            </div>
        </div>
    </div>
</div>

@code {
    private string activeTab = "dashboard";
    private string searchText = "";
    private decimal totalBalance;
    private decimal totalIncome;
    private decimal totalExpense;
    private List<Transaction> recentTransactions = new();
    private List<Budget> budgets = new();
    private List<Category> categories = new();
    private List<Transaction> allTransactions = new();

    protected override void OnInitialized()
    {
        LoadData();
    }

    private void LoadData()
    {
        // Load all data from repositories
        allTransactions = TransactionRepo.GetAll().ToList();
        budgets = BudgetRepo.GetAll().ToList();
        categories = CategoryRepo.GetAll().ToList();

        // Calculate totals
        var incomes = allTransactions.OfType<Income>();
        var expenses = allTransactions.OfType<Expense>();

        totalIncome = incomes.Sum(t => t.Amount.Amount);
        totalExpense = expenses.Sum(t => t.Amount.Amount);
        totalBalance = totalIncome - totalExpense;

        // Get recent transactions
        recentTransactions = allTransactions
            .OrderByDescending(t => t.Date)
            .Take(10)
            .ToList();
    }

    private List<Transaction> filteredTransactions
    {
        get
        {
            if (string.IsNullOrWhiteSpace(searchText))
                return allTransactions.OrderByDescending(t => t.Date).ToList();

            return allTransactions
                .Where(t => t.Description.Contains(searchText, StringComparison.OrdinalIgnoreCase))
                .OrderByDescending(t => t.Date)
                .ToList();
        }
    }

    private void SwitchTab(string tabName)
    {
        activeTab = tabName;
        LoadData();
    }
}
