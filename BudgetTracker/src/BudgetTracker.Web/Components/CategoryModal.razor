@using BudgetTracker.Data
@using BudgetTracker.Domain.Entities

<div class="modal-overlay @(IsOpen ? "active" : "")" @onclick="OnBackdropClick">
    <div class="modal-dialog" @onclick:stopPropagation>
        <div class="modal-header">
            <h3>@(IsEditMode ? "Edit Category" : "Add Category")</h3>
            <button class="modal-close" @onclick="Close">&times;</button>
        </div>
        <div class="modal-body">
            <div class="form-group">
                <label>Category Name</label>
                <input type="text" @bind="categoryName" placeholder="Enter category name" class="form-control" />
            </div>

            <div class="form-group">
                <label>Description (Optional)</label>
                <textarea @bind="description" placeholder="Enter category description" class="form-control" rows="3"></textarea>
            </div>

            @if (!string.IsNullOrEmpty(errorMessage))
            {
                <div class="alert alert-danger">@errorMessage</div>
            }
        </div>
        <div class="modal-footer">
            <button class="btn btn-secondary" @onclick="Close">Cancel</button>
            <button class="btn btn-primary" @onclick="Save">@(IsEditMode ? "Update" : "Add") Category</button>
        </div>
    </div>
</div>

<style>
    .modal-overlay {
        display: none;
        position: fixed;
        top: 0;
        left: 0;
        right: 0;
        bottom: 0;
        background: rgba(0, 0, 0, 0.5);
        z-index: 1000;
    }

    .modal-overlay.active {
        display: flex;
        align-items: center;
        justify-content: center;
    }

    .modal-dialog {
        background: white;
        border-radius: 8px;
        box-shadow: 0 4px 20px rgba(0, 0, 0, 0.15);
        width: 90%;
        max-width: 500px;
        animation: slideIn 0.3s ease;
    }

    @@keyframes slideIn {
        from {
            transform: translateY(-50px);
            opacity: 0;
        }
        to {
            transform: translateY(0);
            opacity: 1;
        }
    }

    .modal-header {
        padding: 20px;
        border-bottom: 1px solid #e0e0e0;
        display: flex;
        justify-content: space-between;
        align-items: center;
    }

    .modal-header h3 {
        margin: 0;
        font-size: 20px;
        color: #333;
    }

    .modal-close {
        background: none;
        border: none;
        font-size: 28px;
        cursor: pointer;
        color: #666;
        padding: 0;
        width: 32px;
        height: 32px;
        display: flex;
        align-items: center;
        justify-content: center;
    }

    .modal-close:hover {
        color: #000;
    }

    .modal-body {
        padding: 20px;
    }

    .modal-footer {
        padding: 20px;
        border-top: 1px solid #e0e0e0;
        display: flex;
        gap: 10px;
        justify-content: flex-end;
    }

    .form-control {
        width: 100%;
        padding: 10px;
        border: 1px solid #ddd;
        border-radius: 4px;
        font-size: 14px;
        font-family: inherit;
    }

    .form-control:focus {
        outline: none;
        border-color: #007bff;
        box-shadow: 0 0 0 3px rgba(0, 123, 255, 0.1);
    }

    textarea.form-control {
        resize: vertical;
    }

    .alert {
        padding: 12px;
        border-radius: 4px;
        margin-bottom: 16px;
    }

    .alert-danger {
        background: #f8d7da;
        color: #721c24;
        border: 1px solid #f5c6cb;
    }
</style>

@code {
    [Parameter]
    public bool IsOpen { get; set; }

    [Parameter]
    public bool IsEditMode { get; set; }

    [Parameter]
    public Category? CurrentCategory { get; set; }

    [Parameter]
    public EventCallback OnSave { get; set; }

    [Parameter]
    public EventCallback OnClose { get; set; }

    private string categoryName = "";
    private string description = "";
    private string errorMessage = "";

    protected override void OnParametersSet()
    {
        if (IsEditMode && CurrentCategory != null)
        {
            categoryName = CurrentCategory.Name;
            description = CurrentCategory.Description ?? "";
        }
        else
        {
            ResetForm();
        }
    }

    private void ResetForm()
    {
        categoryName = "";
        description = "";
        errorMessage = "";
    }

    private async Task Save()
    {
        errorMessage = "";

        if (string.IsNullOrEmpty(categoryName))
        {
            errorMessage = "Category name is required";
            return;
        }

        if (categoryName.Length < 2)
        {
            errorMessage = "Category name must be at least 2 characters";
            return;
        }

        await OnSave.InvokeAsync();
    }

    public void Close()
    {
        ResetForm();
        InvokeAsync(async () => await OnClose.InvokeAsync());
    }

    private void OnBackdropClick()
    {
        Close();
    }

    // Public methods to get form values
    public string GetCategoryName() => categoryName;
    public string GetDescription() => description;
}
