@using BudgetTracker.Data
@using BudgetTracker.Domain.Entities

@if (IsOpen)
{
<div class="modal-overlay active" @onclick="OnOverlayClick">
    <div class="modal-dialog" @onclick:stopPropagation>
        <div class="modal-header">
            <h3>@(IsEditMode ? "Edit Budget" : "Add Budget")</h3>
            <button class="modal-close" @onclick="Close">&times;</button>
        </div>
        <div class="modal-body">
            <div class="form-group">
                <label>Category</label>
                <select @bind="selectedCategoryId" class="form-control">
                    <option value="">-- Select Category --</option>
                    @foreach (var cat in Categories)
                    {
                        <option value="@cat.Id">@cat.Name</option>
                    }
                </select>
            </div>

            <div class="form-group">
                <label>Budget Amount ($)</label>
                <input type="number" @bind="budgetAmount" placeholder="Enter budget amount" class="form-control" step="0.01" />
            </div>

            <div class="form-group">
                <label>Start Date</label>
                <input type="date" @bind="startDate" class="form-control" />
            </div>

            <div class="form-group">
                <label>End Date</label>
                <input type="date" @bind="endDate" class="form-control" />
            </div>

            @if (!string.IsNullOrEmpty(errorMessage))
            {
                <div class="alert alert-danger">@errorMessage</div>
            }
        </div>
        <div class="modal-footer">
            <button class="btn btn-secondary" @onclick="Close">Cancel</button>
            <button class="btn btn-primary" @onclick="Save">@(IsEditMode ? "Update" : "Add") Budget</button>
        </div>
    </div>
</div>
}

<style>
    .modal-overlay {
        position: fixed;
        top: 0;
        left: 0;
        right: 0;
        bottom: 0;
        background: rgba(0, 0, 0, 0.5);
        z-index: 1000;
        display: flex;
        align-items: center;
        justify-content: center;
    }

    .modal-dialog {
        background: white;
        border-radius: 8px;
        box-shadow: 0 4px 20px rgba(0, 0, 0, 0.15);
        width: 90%;
        max-width: 500px;
        animation: slideIn 0.3s ease;
        pointer-events: auto;
    }

    @@keyframes slideIn {
        from {
            transform: translateY(-50px);
            opacity: 0;
        }
        to {
            transform: translateY(0);
            opacity: 1;
        }
    }

    .modal-header {
        padding: 20px;
        border-bottom: 1px solid #e0e0e0;
        display: flex;
        justify-content: space-between;
        align-items: center;
    }

    .modal-header h3 {
        margin: 0;
        font-size: 20px;
        color: #333;
    }

    .modal-close {
        background: none;
        border: none;
        font-size: 28px;
        cursor: pointer;
        color: #666;
        padding: 0;
        width: 32px;
        height: 32px;
        display: flex;
        align-items: center;
        justify-content: center;
    }

    .modal-close:hover {
        color: #000;
    }

    .modal-body {
        padding: 20px;
    }

    .modal-footer {
        padding: 20px;
        border-top: 1px solid #e0e0e0;
        display: flex;
        gap: 10px;
        justify-content: flex-end;
    }

    .form-control {
        width: 100%;
        padding: 10px;
        border: 1px solid #ddd;
        border-radius: 4px;
        font-size: 14px;
    }

    .form-control:focus {
        outline: none;
        border-color: #007bff;
        box-shadow: 0 0 0 3px rgba(0, 123, 255, 0.1);
    }

    .alert {
        padding: 12px;
        border-radius: 4px;
        margin-bottom: 16px;
    }

    .alert-danger {
        background: #f8d7da;
        color: #721c24;
        border: 1px solid #f5c6cb;
    }
</style>

@code {
    [Parameter]
    public bool IsOpen { get; set; }

    [Parameter]
    public bool IsEditMode { get; set; }

    [Parameter]
    public Budget? CurrentBudget { get; set; }

    [Parameter]
    public List<Category> Categories { get; set; } = new();

    [Parameter]
    public EventCallback OnSave { get; set; }

    [Parameter]
    public EventCallback OnClose { get; set; }

    private int selectedCategoryId = 0;
    private decimal budgetAmount = 0;
    private DateTime startDate = DateTime.Now;
    private DateTime endDate = DateTime.Now.AddMonths(1);
    private string errorMessage = "";

    protected override void OnParametersSet()
    {
        if (IsEditMode && CurrentBudget != null)
        {
            selectedCategoryId = CurrentBudget.CategoryId;
            budgetAmount = CurrentBudget.Amount.Amount;
            startDate = CurrentBudget.StartDate;
            endDate = CurrentBudget.EndDate;
        }
        else
        {
            ResetForm();
        }
    }

    private void ResetForm()
    {
        selectedCategoryId = 0;
        budgetAmount = 0;
        startDate = DateTime.Now;
        endDate = DateTime.Now.AddMonths(1);
        errorMessage = "";
    }

    private async Task Save()
    {
        errorMessage = "";

        if (selectedCategoryId == 0)
        {
            errorMessage = "Please select a category";
            return;
        }

        if (budgetAmount <= 0)
        {
            errorMessage = "Budget amount must be greater than 0";
            return;
        }

        if (endDate <= startDate)
        {
            errorMessage = "End date must be after start date";
            return;
        }

        await OnSave.InvokeAsync();
    }

    public void Close()
    {
        ResetForm();
        InvokeAsync(async () => await OnClose.InvokeAsync());
    }

    private void OnOverlayClick(MouseEventArgs e)
    {
        // Only close when clicking the overlay background, not the dialog content
        // This is handled by CSS: dialog has pointer-events: auto
        // If you click inside the dialog, this event won't fire due to event capture
        Close();
    }

    // Public methods to get form values
    public int GetSelectedCategoryId() => selectedCategoryId;
    public decimal GetBudgetAmount() => budgetAmount;
    public DateTime GetStartDate() => startDate;
    public DateTime GetEndDate() => endDate;
}
