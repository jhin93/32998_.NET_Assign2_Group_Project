========================================
BUDGET TRACKER - FEATURE IMPLEMENTATION & DEMO ORDER
========================================
Team Members: Jinkyung Kim (14657314), Tahmid Ahmed (25178688)

----------------------------------------
Phase 1: Basic Setup & Infrastructure (Settings)
----------------------------------------
1. [V] Project Structure Setup
   - BudgetTracker.Domain (Entities, Value Objects, Enums)
   - BudgetTracker.Core (Interfaces, Services)
   - BudgetTracker.Data (Repository)
   - BudgetTracker.App (Windows Forms)
   - BudgetTracker.Tests (NUnit Tests)

2. [ ] Domain Layer Implementation
   - Transaction (Abstract Base Class) ★ Polymorphism
   - Expense (Inherits from Transaction) ★ Inheritance
   - Income (Inherits from Transaction) ★ Inheritance
   - Category class
   - Budget class
   - Money Value Object
   - Frequency Enum

3. [ ] Core Interfaces Implementation ★ Interface (Minimum 2)
   - IRepository<T> (Generic Repository Pattern) ★ Generics
   - IRecurring (Recurring transactions)
   - IExportable (Data export)
   - IRule (Business rules)

4. [ ] Data Access Layer
   - InMemoryRepository implementation
   - SeedData (Initial test data)
   - (Optional) Entity Framework + Database integration ★ Bonus 3pts

5. [ ] SettingsForm Implementation (Demo Step 1)
   - Category management (Add/Edit/Delete)
   - Account management (Add/Edit/Delete)
   - UI Controls: DataGridView, Button, TextBox, ComboBox

----------------------------------------
Phase 2: Core Features - Transaction Management
----------------------------------------
6. [ ] TransactionsForm Implementation (Demo Step 2)
   - Transaction Add/Edit/Delete (CRUD)
   - Income/Expense distinction
   - Category selection
   - Date selection (DateTimePicker)
   - Amount input (with validation)
   - UI Controls: DataGridView, Button, DatePicker, ComboBox, TextBox

7. [ ] Transaction Filtering & Search Features ★ LINQ + Lambda
   - Date range filter
   - Category filter
   - Income/Expense type filter
   - Search functionality (Description)
   - var filtered = transactions.Where(t => t.Date >= start && t.Date <= end).ToList();

8. [ ] CSV Import Feature Implementation (Demo during)
   - CsvImportService class
   - File selection (OpenFileDialog)
   - CSV parsing and validation
   - Bulk transaction import

----------------------------------------
Phase 3: Budget Management
----------------------------------------
9. [ ] BudgetsForm Implementation (Demo Step 3)
   - Budget creation (by category, by period)
   - Budget edit/delete
   - Budget templates
   - UI Controls: ProgressBar (budget usage), Panel, Label

10. [ ] BudgetService Implementation
    - Calculate actual spending vs budget ★ LINQ Aggregation
    - Budget exceeded alerts
    - var spent = transactions.Where(t => t.CategoryId == id).Sum(t => t.Amount);

11. [ ] RuleEngine Implementation ★ Strategy Pattern
    - Budget exceeded rules
    - Alert rules
    - Validation rules

----------------------------------------
Phase 4: Dashboard & Visualization
----------------------------------------
12. [ ] DashboardForm Implementation (Demo Step 4)
    - Total balance display
    - Recent transactions summary
    - Budget status (ProgressBar)
    - Spending trend chart (Chart Control) ★ Visualization
    - UI Controls: Chart, ProgressBar, Panel, Label, Button

13. [ ] Inter-Form Communication Implementation ★ Delegates & Events
    - TransactionAdded Event
    - BudgetUpdated Event
    - CategoryChanged Event
    - Dashboard auto-refresh

----------------------------------------
Phase 5: Reports & Analytics
----------------------------------------
14. [ ] ReportsForm Implementation (Demo Step 5)
    - Spending report (by category) ★ LINQ GroupBy
    - Income report
    - Budget vs Actual comparison
    - Trend analysis
    - Pie Chart (spending by category)
    - Bar Chart (monthly spending comparison)
    - UI Controls: Chart, DatePicker, Button, ComboBox

15. [ ] ReportService Implementation ★ LINQ + Lambda Expression
    - var categoryReport = transactions
        .GroupBy(t => t.Category)
        .Select(g => new { Category = g.Key, Total = g.Sum(t => t.Amount) })
        .OrderByDescending(x => x.Total)
        .ToList();

16. [ ] Export Functionality
    - PDF export (optional)
    - CSV export
    - Report save

----------------------------------------
Phase 6: Advanced Features & Testing
----------------------------------------
17. [ ] Recurring Transaction Feature
    - RecurringTransactionService
    - Weekly/Monthly/Yearly recurrence
    - IRecurring interface implementation

18. [ ] Properties & Extension Methods Implementation
    - Properties: Transaction.FormattedAmount
    - Extension Methods: decimal.ToCurrency()

19. [ ] NUnit Test Writing ★ Testing (Required)
    - BudgetServiceTests
    - RuleEngineTests
    - CsvImportTests
    - TransactionTests

20. [ ] Input Validation & Error Handling
    - Amount validation (positive, numeric)
    - Required field validation
    - Try-Catch blocks
    - User-friendly error messages

21. [ ] UI Responsive Design
    - Anchor and Dock property settings
    - Resizable forms
    - Minimum size settings

----------------------------------------
Phase 7: Final Review & Bonus
----------------------------------------
22. [ ] Code Quality Improvement
    - Add comments
    - Meaningful variable/method names
    - Proper indentation
    - High Cohesion, Low Coupling

23. [ ] (Optional) Entity Framework Integration ★ Bonus 3pts
    - AppDbContext setup
    - EfRepository implementation
    - Migration creation
    - Database connection

24. [ ] (Optional) WPF/Blazor/ASP.NET Version ★ Bonus 2pts
    - Port current project to different UI framework

25. [ ] Documentation
    - README.md creation
    - Usage instructions
    - Code comments
    - Report.pdf final review

========================================
DEMO SEQUENCE (Demo Flow)
========================================

STEP 1: Initial Setup (SettingsForm)
   -> Add categories (Food, Transport, Entertainment, etc.)
   -> Add accounts (Bank Account, Cash, etc.)

STEP 2: Transaction Entry (TransactionsForm)
   -> Add income (Salary)
   -> Add expenses (Groceries, Gas, Movie, etc.)
   -> Import bulk transactions via CSV Import
   -> Demonstrate filtering and search features

STEP 3: Budget Setup (BudgetsForm)
   -> Create monthly budgets (Food: $500, Transport: $200)
   -> Check budget progress
   -> View budget exceeded alerts

STEP 4: Dashboard Review (DashboardForm)
   -> Check total balance
   -> View recent transactions list
   -> Visualize budget status
   -> View spending trend chart

STEP 5: Reports & Analysis (ReportsForm)
   -> Category spending Pie Chart
   -> Monthly spending Bar Chart
   -> Budget vs Actual comparison
   -> Export report to CSV

STEP 6: Advanced Features
   -> Setup recurring transactions
   -> Run tests (NUnit)
   -> Demonstrate error handling

========================================
TECHNICAL REQUIREMENTS CHECKLIST
========================================
[ ] GUI Forms (Min 4): Dashboard, Transactions, Budgets, Reports, Settings
[ ] UI Elements (Min 6): Button, DataGridView, Chart, ProgressBar, DatePicker, ComboBox, TextBox, Label, Panel
[ ] Polymorphism: Transaction -> Expense/Income inheritance
[ ] Interface (Min 2): IRepository, IRecurring, IExportable, IRule
[ ] NUnit Tests
[ ] LINQ + Lambda Expression
[ ] Generics: IRepository<T>, List<T>, Dictionary<K,V>
[ ] Collections: List, Dictionary, SortedDictionary
[ ] Delegates & Events: Inter-form communication
[ ] Properties & Extension Methods
[ ] File I/O: CSV Import/Export
[ ] Error Handling & Validation

========================================
SCORING BREAKDOWN (35pts + Bonus 5pts)
========================================
Project Report: 3pts
Project Idea: 3pts
Code Quality: 3pts
Code Requirement: 6pts
Interface Design: 10pts
Functionality: 10pts
---
Total: 35pts

Bonus:
- Entity Framework: 3pts
- WPF/Blazor/ASP.NET: 2pts
---
Bonus Total: 5pts

Grand Total: 40pts

========================================
DUE DATE: Friday 11:30pm, 17 October 2025
========================================
